name: Build for GitHub and Play Store

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    # Decode the keystore from secrets
    - name: Decode Keystore
      if: github.event_name != 'pull_request'
      env:
        ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $ENCODED_KEYSTORE | base64 -d > android/app/keystore.jks
        
    # Create key.properties file
    - name: Create key.properties
      if: github.event_name != 'pull_request'
      run: |
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=keystore.jks" >> android/key.properties
        
    # Build BOTH APK and App Bundle
    - name: Build APK for GitHub Release
      run: flutter build apk --release
      
    - name: Build App Bundle for Play Store
      if: github.event_name != 'pull_request'
      run: flutter build appbundle --release
      
    - name: Get app version
      id: version
      run: |
        VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //')
        BUILD_NUMBER=$(echo $VERSION | cut -d'+' -f2)
        VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
    # Generate hash for SLSA (APK only)
    - name: Generate subject for SLSA
      id: hash
      run: |
        set -euo pipefail
        echo "hashes=$(sha256sum build/app/outputs/flutter-apk/app-release.apk | base64 -w0)" >> $GITHUB_OUTPUT
        
    # Generate checksums for both
    - name: Create checksums
      run: |
        sha256sum build/app/outputs/flutter-apk/app-release.apk > SHA256SUMS.txt
        if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
          sha256sum build/app/outputs/bundle/release/app-release.aab >> SHA256SUMS.txt
        fi
        
    # Upload APK for GitHub distribution
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: tote-tracker-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 5
        
    # Upload App Bundle for Play Store
    - name: Upload App Bundle artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: tote-tracker-bundle
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: 30
        
    # Create summary
    - name: Create Build Summary
      run: |
        echo "## ðŸ“¦ Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version_name }} (${{ steps.version.outputs.build_number }})" >> $GITHUB_STEP_SUMMARY
        echo "- **APK**: âœ… Built for GitHub/direct distribution" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          echo "- **App Bundle**: âœ… Built for Play Store" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸŽ¯ Distribution Targets" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: app-release.apk (direct install)" >> $GITHUB_STEP_SUMMARY
        echo "- **Google Play Store**: app-release.aab (upload to Play Console)" >> $GITHUB_STEP_SUMMARY

  # Optional: Automatic Play Store Upload
  # upload-to-play-store:
  #   needs: build-and-sign
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   steps:
  #   - name: Download App Bundle
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: tote-tracker-bundle
        
  #   # Automatic upload to Play Store (requires additional setup)
  #   - name: Upload to Play Store
  #     uses: r0adkll/upload-google-play@v1
  #     with:
  #       serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
        packageName: com.yourcompany.totetracker  # Your app's package name
        releaseFiles: app-release.aab
        track: internal  # or 'production', 'alpha', 'beta'
        whatsNewDirectory: whatsnew/  # Optional: directory with release notes
